/**
 * © Copyright 2014 Sualeh Fatehi
 * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US.
 */
package com.sample;

import com.sample.fact.ProcessState;
import com.sample.fact.ProcessState.State;

/*
All the rules can be activated, but Drools has to pick one to go first. 
Drools would resolve this by picking the last rule that appears in the 
file. However, since a salience value is set, Drools uses that instead 
to fire rules in order of salience.
*/

rule "New Process to Process B"
salience 30
    when
        fact: ProcessState(name == "New Process", state == State.NOT_STARTED)
    then
        System.out.println("Rule fired \"New Process to Process B\": fact matched " + fact);
        fact.setState(State.NOT_STARTED);
        fact.setName("Process B");
        update(fact);
        System.out.println("Rule \"New Process to Process B\": after update " + fact);
end

rule "New Process to Process C"
salience 20
    when
        fact: ProcessState(name == "New Process", state == State.NOT_STARTED)
    then
        System.out.println("Rule fired \"New Process to Process C\": fact matched " + fact);
        fact.setState(State.NOT_STARTED);
        fact.setName("Process C");
        update(fact);
        System.out.println("Rule \"New Process to Process C\": after update " + fact);
end

rule "Catch-all"
no-loop true
salience 10
    when
        fact: ProcessState(state == State.NOT_STARTED)
    then
        System.out.println("Rule fired \"Catch-all\": fact matched " + fact);
        fact.setState(State.NOT_STARTED);
        fact.setName("Process Y");
        update(fact);
        System.out.println("Rule \"Catch-all\": after update " + fact);
end
